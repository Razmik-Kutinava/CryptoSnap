// Vercel Serverless Function –¥–ª—è Telegram –±–æ—Ç–∞
const TelegramBot = require('node-telegram-bot-api');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TOKEN || '8319585111:AAF8kp_kxMe1ZC_iFSB3s2ESTMbKRcZ6qJo';
const webAppUrl = process.env.WEBAPP_URL || 'https://crypto-snap-lilac.vercel.app';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–±–µ–∑ polling –¥–ª—è serverless)
const bot = new TelegramBot(token);

export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  try {
    if (req.method === 'POST') {
      const update = req.body;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
      if (update.message && update.message.text === '/start') {
        const chatId = update.message.chat.id;
        const userName = update.message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        console.log(`üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (${chatId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
        
        const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã\n\nüí∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—Ä–∏–ø—Ç–æ –¢–∞–±–ª–æ!\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\nüìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã\nüìä –ü–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;
        
        const options = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üì± –û—Ç–∫—Ä—ã—Ç—å –ö—Ä–∏–ø—Ç–æ –¢–∞–±–ª–æ",
                  web_app: {
                    url: webAppUrl
                  }
                }
              ]
            ]
          }
        };
        
        await bot.sendMessage(chatId, welcomeMessage, options);
        
        return res.status(200).json({ 
          success: true, 
          message: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' 
        });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (update.message && update.message.text && !update.message.text.startsWith('/')) {
        const chatId = update.message.chat.id;
        const messageText = update.message.text;
        
        console.log(`üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageText}`);
        
        const responseMessage = `ü§ñ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ö—Ä–∏–ø—Ç–æ –¢–∞–±–ª–æ" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start`;
        
        const options = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üì± –û—Ç–∫—Ä—ã—Ç—å –ö—Ä–∏–ø—Ç–æ –¢–∞–±–ª–æ",
                  web_app: {
                    url: webAppUrl
                  }
                }
              ]
            ]
          }
        };
        
        await bot.sendMessage(chatId, responseMessage, options);
        
        return res.status(200).json({ 
          success: true, 
          message: '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' 
        });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ web_app_data
      if (update.message && update.message.web_app_data) {
        const chatId = update.message.chat.id;
        const data = JSON.parse(update.message.web_app_data.data);
        
        console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', data);
        
        await bot.sendMessage(chatId, `‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: ${JSON.stringify(data)}`);
        
        return res.status(200).json({ 
          success: true, 
          message: '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã' 
        });
      }
    }
    
    return res.status(200).json({ 
      success: true, 
      message: 'Webhook –ø–æ–ª—É—á–µ–Ω' 
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    return res.status(500).json({ 
      success: false, 
      error: error.message 
    });
  }
}

