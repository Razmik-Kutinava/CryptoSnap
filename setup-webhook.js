// –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook Telegram –±–æ—Ç–∞
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const BOT_TOKEN = process.env.TOKEN || '8319585111:AAF8kp_kxMe1ZC_iFSB3s2ESTMbKRcZ6qJo';
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://crypto-snap-lilac.vercel.app/api/bot';

async function setupWebhook() {
  try {
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è Telegram –±–æ—Ç–∞...');
    console.log(`üì° URL webhook: ${WEBHOOK_URL}`);
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: WEBHOOK_URL,
        allowed_updates: ['message', 'callback_query']
      })
    });
    
    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', result.result);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', result.description);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    const infoResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);
    const info = await infoResponse.json();
    
    if (info.ok) {
      console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
      console.log(`URL: ${info.result.url}`);
      console.log(`Pending updates: ${info.result.pending_update_count}`);
      console.log(`Last error: ${info.result.last_error_message || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupWebhook();

