export interface CoinPaprikaResponse {
  id: string;
  name: string;
  symbol: string;
  rank: number;
  quotes: {
    USD: {
      price: number;
      percent_change_24h: number;
      market_cap: number;
      volume_24h: number;
    };
  };
}

export interface CryptoCurrency {
  id: string;
  name: string;
  symbol: string;
  price: number;
  change24h: number;
  changePercent24h: number;
  marketCap: number;
  volume24h: number;
}

const BASE_URL = 'https://api.coinpaprika.com/v1';
const API_BASE_URL = '/api'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ API endpoints

export class CryptoApiService {
  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
  static async getTopCryptos(limit: number = 10): Promise<CryptoCurrency[]> {
    try {
      console.log(`üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ø-${limit} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏–∑ CoinPaprika...`);
      
      const response = await fetch(`${BASE_URL}/tickers?limit=${limit}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data: CoinPaprikaResponse[] = await response.json();
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ—Ç CoinPaprika`);
      console.log('üìä –ü–µ—Ä–≤—ã–µ 3 –º–æ–Ω–µ—Ç—ã:', data.slice(0, 3).map(c => `${c.name}: $${c.quotes.USD.price.toFixed(2)}`));
      
      return data.map(coin => ({
        id: coin.id,
        name: coin.name,
        symbol: coin.symbol,
        price: coin.quotes.USD.price,
        change24h: (coin.quotes.USD.price * coin.quotes.USD.percent_change_24h) / 100,
        changePercent24h: coin.quotes.USD.percent_change_24h,
        marketCap: coin.quotes.USD.market_cap,
        volume24h: coin.quotes.USD.volume_24h
      }));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç CoinPaprika:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
  static async getCrypto(coinId: string): Promise<CryptoCurrency> {
    try {
      console.log(`üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${coinId}...`);
      
      const response = await fetch(`${BASE_URL}/tickers/${coinId}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const coin: CoinPaprikaResponse = await response.json();
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${coin.name}: $${coin.quotes.USD.price.toFixed(2)}`);
      
      return {
        id: coin.id,
        name: coin.name,
        symbol: coin.symbol,
        price: coin.quotes.USD.price,
        change24h: (coin.quotes.USD.price * coin.quotes.USD.percent_change_24h) / 100,
        changePercent24h: coin.quotes.USD.percent_change_24h,
        marketCap: coin.quotes.USD.market_cap,
        volume24h: coin.quotes.USD.volume_24h
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${coinId}:`, error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ');
    }
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
  static convertCrypto(
    amount: number, 
    fromPrice: number, 
    toPrice: number
  ): number {
    const result = (amount * fromPrice) / toPrice;
    console.log(`üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${amount} √ó $${fromPrice} / $${toPrice} = ${result.toFixed(6)}`);
    return result;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API
  static async getTopCryptosLocal(limit: number = 10): Promise<CryptoCurrency[]> {
    try {
      console.log(`üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ø-${limit} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API...`);
      
      const response = await fetch(`${API_BASE_URL}/crypto?limit=${limit}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ API');
      }
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${result.data.length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API`);
      
      return result.data.map((coin: any) => ({
        id: coin.id,
        name: coin.name,
        symbol: coin.symbol,
        price: coin.price,
        change24h: (coin.price * coin.change24h) / 100,
        changePercent24h: coin.change24h,
        marketCap: coin.marketCap,
        volume24h: coin.volume24h
      }));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API:', error);
      // Fallback –∫ –ø—Ä—è–º–æ–º—É API
      return this.getTopCryptos(limit);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API
  static async getCryptoLocal(coinId: string): Promise<CryptoCurrency> {
    try {
      console.log(`üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${coinId} —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API...`);
      
      const response = await fetch(`${API_BASE_URL}/crypto?symbol=${coinId}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ API');
      }
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${result.data.name}: $${result.data.price.toFixed(2)}`);
      
      return {
        id: result.data.id,
        name: result.data.name,
        symbol: result.data.symbol,
        price: result.data.price,
        change24h: (result.data.price * result.data.change24h) / 100,
        changePercent24h: result.data.change24h,
        marketCap: result.data.marketCap,
        volume24h: result.data.volume24h
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${coinId} —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API:`, error);
      // Fallback –∫ –ø—Ä—è–º–æ–º—É API
      return this.getCrypto(coinId);
    }
  }

  // –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
  static async testApi(): Promise<boolean> {
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CoinPaprika API...');
      
      const response = await fetch(`${BASE_URL}/tickers?limit=1`);
      
      if (!response.ok) {
        console.error(`‚ùå API —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: HTTP ${response.status}`);
        return false;
      }
      
      const data = await response.json();
      
      if (data && data.length > 0) {
        console.log('‚úÖ API —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', {
          name: data[0].name,
          price: data[0].quotes?.USD?.price,
          symbol: data[0].symbol
        });
        return true;
      } else {
        console.error('‚ùå API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error);
      return false;
    }
  }

  // –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
  static async testLocalApi(): Promise<boolean> {
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API...');
      
      const response = await fetch(`${API_BASE_URL}/test`);
      
      if (!response.ok) {
        console.error(`‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π API —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: HTTP ${response.status}`);
        return false;
      }
      
      const data = await response.json();
      
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π API —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!', data);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API:', error);
      return false;
    }
  }
}